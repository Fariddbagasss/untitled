package Master;

import javax.swing.*;
import com.toedter.calendar.JDateChooser;
import connection.DBConnect;

import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.sql.SQLException;
import java.text.Format;
import java.text.SimpleDateFormat;

public class Event extends JFrame{
    private JTextField tbidevt;
    private JTextField tbnamaevt;
    private JTextField tbdisc;
    private JTextField tbket;
    private JTextField tbstatus;
    private JButton tambahButton;
    private JButton lihatButton;
    private JButton ubahButton;
    private JButton hapusButton;
    private JTable tblEvent;
    private JPanel tanggalevent;
    private JPanel kelolaevent;
    DefaultTableModel model;
    DBConnect connect = new DBConnect();
    JDateChooser datechos = new JDateChooser();
    String idevent, namaevent, tglevent, keterangan;
    double disc;
    int status;
    public Event(){
        setContentPane(kelolaevent);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setSize(400, 500);
        model = new DefaultTableModel();
        tblEvent.setModel(model);
        addColumn();
        loadData();
        tanggalevent.add(datechos);
        tbidevt.setText(getAutoGeneratedID());
        tbstatus.setText("Aktif");
        tbstatus.setEditable(false);
        clear();
        tambahButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                idevent = tbidevt.getText();
                namaevent = tbnamaevt.getText();
                disc= Double.parseDouble(tbdisc.getText().toString());
                keterangan =tbket.getText();

                Format format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                tglevent= format.format(datechos.getDate());
                try {
                    status = tbstatus.getText().equalsIgnoreCase("Aktif") ? 1 : 0;
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Status harus angka");
                    return;
                }
                try {
                    String query = "INSERT INTO tblEvent VALUES (?,?,?,?,?,?)";
                    connect.pstat = connect.conn.prepareStatement(query);
                    connect.pstat.setString(1, idevent);
                    connect.pstat.setString(2, namaevent);
                    connect.pstat.setString(3, tglevent);
                    connect.pstat.setDouble(4, disc);
                    connect.pstat.setString(5, keterangan);
                    connect.pstat.setInt(6,status);
                    connect.pstat.executeUpdate();
                    connect.pstat.close();
                } catch (SQLException ex) {
                    System.out.println("Terjadi error saat insert data event: " + ex);
                }
                JOptionPane.showMessageDialog(null, "Insert data event berhasil! ");
                loadData();
                clear();

            }
        });
        tblEvent.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                int i = tblEvent.getSelectedRow();
                if (i == -1) {
                    return;
                }
                tbidevt.setText((String) model.getValueAt(i, 0));
                tbnamaevt.setText((String) model.getValueAt(i, 1));
                datechos.setDate(Date.valueOf(model.getValueAt(i,2).toString()));
                tbdisc.setText((String) model.getValueAt(i,3));
                tbket.setText((String) model.getValueAt(i,4));
                String stringStat = (String) model.getValueAt(i,5);
                if (stringStat.equals("1")) {
                    tbstatus.setText("Aktif");
                } else if (stringStat.equals("0")) {
                    tbstatus.setText("Tidak Aktif");
                }
            }
        });
        ubahButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                idevent = tbidevt.getText();
                namaevent= tbnamaevt.getText();
                disc= Double.parseDouble(tbdisc.getText().toString());
                keterangan=tbket.getText();

                Format format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                tglevent = format.format(datechos.getDate());
                try {
                    String querry = "UPDATE tblEvent SET nama_evt=?, tgl_evt=?, diskon=?, keterangan=? WHERE id_evt=?";
                    connect.pstat = connect.conn.prepareStatement(querry);
                    connect.pstat.setString(1, namaevent);
                    connect.pstat.setString(2,tglevent);
                    connect.pstat.setDouble(3, disc);
                    connect.pstat.setString(4, keterangan);
                    connect.pstat.setString(5, idevent);
                    connect.pstat.executeUpdate();
                    connect.pstat.close();
                } catch (SQLException ex) {
                    System.out.println("Terjadi error saat ubah data event" + ex);
                }
                JOptionPane.showMessageDialog(null, "Ubah Data Event Berhasil");
                loadData();
                clear();
            }
        });
        hapusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                idevent = tbidevt.getText();
                try {
                    String query = "UPDATE tblEvent SET status_evt = 0 WHERE id_evt=?";
                    connect.pstat = connect.conn.prepareStatement(query);
                    connect.pstat.setString(1, idevent);
                    connect.pstat.executeUpdate();
                    connect.pstat.close();
                    JOptionPane.showMessageDialog(null, "Delete Data Event Berhasil!");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Delete Data Event Gagal!"+ex.getMessage());
//                    String errorMessage = ex.getMessage();
//                    System.out.println("Error Message: " + errorMessage);
                    System.out.println("Terjadi Error saat Delete Data Event: " + ex);
                }
                loadData();
                clear();
            }
        });
    }
    public void addColumn() {
        model.addColumn("Id Event");
        model.addColumn("Nama Event");
        model.addColumn("Tanggal Event");
        model.addColumn("Diskon");
        model.addColumn("Keterangan");
        model.addColumn("Status");
    }
    public void loadData() {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        try {
            DBConnect connection = new DBConnect();
            connection.stat = connection.conn.createStatement();
            String querry = "SELECT * FROM tblEvent";
            connection.result = connection.stat.executeQuery(querry);
            while (connection.result.next()) {
                Object[] obj = new Object[6];
                obj[0] = connection.result.getString("id_evt");
                obj[1] = connection.result.getString("nama_evt");
                obj[2] = connection.result.getString("tgl_evt");
                obj[3] = connection.result.getString("diskon");
                obj[4] = connection.result.getString("keterangan");
                obj[5] = connection.result.getInt("status_evt");
                model.addRow(obj);
            }
            connection.stat.close();
            connection.result.close();
        } catch (Exception e) {
            System.out.println("Terjadi error saat load data item: " + e);
        }
    }

    public String getAutoGeneratedID() {
        String id = "";
        try {
            connect.stat = connect.conn.createStatement();
            String query = "SELECT MAX(SUBSTRING(id_evt, 4, LEN(id_evt))) AS ID FROM tblEvent";
            connect.result = connect.stat.executeQuery(query);

            if (connect.result.next()) {
                String lastID = connect.result.getString("ID");
                if(lastID != null){
                    int incrementedID = Integer.parseInt(lastID) + 1;
                    id = "EV" + String.format("%03d", incrementedID);
                }else {
                    id= "EV001";
                }
            }
            connect.stat.close();
            connect.result.close();
        } catch (SQLException e) {
            System.out.println("Terjadi kesalahan: " + e.getMessage());
        }
        return id;
    }

    private void clear() {
        tbidevt.setText(getAutoGeneratedID());
        tbnamaevt.setText("");
        tbdisc.setText("");
        tbstatus.setText("Aktif");
        tbket.setText("");
        datechos.setDate(null);
    }

    public static void main(String[] args) {
        JFrame tcGUI = new Event();
        tcGUI.setVisible(true);
    }

}
